// Code generated by goctl. DO NOT EDIT.
// Source: bird.proto

package birdclient

import (
	"context"

	"synergy-bird-rpc/types/bird"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FetchUserIllustrationReq  = bird.FetchUserIllustrationReq
	FetchUserIllustrationResp = bird.FetchUserIllustrationResp
	GalleryCreateReq          = bird.GalleryCreateReq
	GalleryListReq            = bird.GalleryListReq
	GalleryListResp           = bird.GalleryListResp
	GalleryResp               = bird.GalleryResp
	GalleryUpdateReq          = bird.GalleryUpdateReq
	IllustrationsCreateReq    = bird.IllustrationsCreateReq
	IllustrationsListReq      = bird.IllustrationsListReq
	IllustrationsListResp     = bird.IllustrationsListResp
	IllustrationsResp         = bird.IllustrationsResp
	IllustrationsUpdateReq    = bird.IllustrationsUpdateReq
	LabelCreateReq            = bird.LabelCreateReq
	LabelListReq              = bird.LabelListReq
	LabelListResp             = bird.LabelListResp
	LabelResp                 = bird.LabelResp
	LabelUpdateReq            = bird.LabelUpdateReq

	Bird interface {
		GalleryCreate(ctx context.Context, in *GalleryCreateReq, opts ...grpc.CallOption) (*GalleryResp, error)
		GalleryUpdate(ctx context.Context, in *GalleryUpdateReq, opts ...grpc.CallOption) (*GalleryResp, error)
		GalleryList(ctx context.Context, in *GalleryListReq, opts ...grpc.CallOption) (*GalleryListResp, error)
		IllustrationCreate(ctx context.Context, in *IllustrationsCreateReq, opts ...grpc.CallOption) (*IllustrationsResp, error)
		IllustrationUpdate(ctx context.Context, in *IllustrationsUpdateReq, opts ...grpc.CallOption) (*IllustrationsResp, error)
		IllustrationList(ctx context.Context, in *IllustrationsListReq, opts ...grpc.CallOption) (*IllustrationsListResp, error)
		FetchUserIllustration(ctx context.Context, in *FetchUserIllustrationReq, opts ...grpc.CallOption) (*FetchUserIllustrationResp, error)
		LabelCreate(ctx context.Context, in *LabelCreateReq, opts ...grpc.CallOption) (*LabelResp, error)
		LabelUpdate(ctx context.Context, in *LabelUpdateReq, opts ...grpc.CallOption) (*LabelResp, error)
		LabelList(ctx context.Context, in *LabelListReq, opts ...grpc.CallOption) (*LabelListResp, error)
	}

	defaultBird struct {
		cli zrpc.Client
	}
)

func NewBird(cli zrpc.Client) Bird {
	return &defaultBird{
		cli: cli,
	}
}

func (m *defaultBird) GalleryCreate(ctx context.Context, in *GalleryCreateReq, opts ...grpc.CallOption) (*GalleryResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.GalleryCreate(ctx, in, opts...)
}

func (m *defaultBird) GalleryUpdate(ctx context.Context, in *GalleryUpdateReq, opts ...grpc.CallOption) (*GalleryResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.GalleryUpdate(ctx, in, opts...)
}

func (m *defaultBird) GalleryList(ctx context.Context, in *GalleryListReq, opts ...grpc.CallOption) (*GalleryListResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.GalleryList(ctx, in, opts...)
}

func (m *defaultBird) IllustrationCreate(ctx context.Context, in *IllustrationsCreateReq, opts ...grpc.CallOption) (*IllustrationsResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.IllustrationCreate(ctx, in, opts...)
}

func (m *defaultBird) IllustrationUpdate(ctx context.Context, in *IllustrationsUpdateReq, opts ...grpc.CallOption) (*IllustrationsResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.IllustrationUpdate(ctx, in, opts...)
}

func (m *defaultBird) IllustrationList(ctx context.Context, in *IllustrationsListReq, opts ...grpc.CallOption) (*IllustrationsListResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.IllustrationList(ctx, in, opts...)
}

func (m *defaultBird) FetchUserIllustration(ctx context.Context, in *FetchUserIllustrationReq, opts ...grpc.CallOption) (*FetchUserIllustrationResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.FetchUserIllustration(ctx, in, opts...)
}

func (m *defaultBird) LabelCreate(ctx context.Context, in *LabelCreateReq, opts ...grpc.CallOption) (*LabelResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.LabelCreate(ctx, in, opts...)
}

func (m *defaultBird) LabelUpdate(ctx context.Context, in *LabelUpdateReq, opts ...grpc.CallOption) (*LabelResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.LabelUpdate(ctx, in, opts...)
}

func (m *defaultBird) LabelList(ctx context.Context, in *LabelListReq, opts ...grpc.CallOption) (*LabelListResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.LabelList(ctx, in, opts...)
}
