// Code generated by goctl. DO NOT EDIT.
// Source: bird.proto

package birdclient

import (
	"context"

	"github.com/iot-synergy/synergy-bird-rpc/types/bird"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseIDResp              = bird.BaseIDResp
	BaseResp                = bird.BaseResp
	BaseUUIDResp            = bird.BaseUUIDResp
	BooleanResp             = bird.BooleanResp
	ClassesData             = bird.ClassesData
	ClassesListReq          = bird.ClassesListReq
	ClassesListResp         = bird.ClassesListResp
	Empty                   = bird.Empty
	GalleryCount            = bird.GalleryCount
	GalleryCountData        = bird.GalleryCountData
	GalleryCreateReq        = bird.GalleryCreateReq
	GalleryListReq          = bird.GalleryListReq
	GalleryListResp         = bird.GalleryListResp
	GalleryListRespData     = bird.GalleryListRespData
	GalleryPageReq          = bird.GalleryPageReq
	GalleryResp             = bird.GalleryResp
	GalleryRespData         = bird.GalleryRespData
	GalleryUpdateReq        = bird.GalleryUpdateReq
	Headline                = bird.Headline
	HeadlineListData        = bird.HeadlineListData
	HeadlineListResp        = bird.HeadlineListResp
	HeadlineQueryPageReq    = bird.HeadlineQueryPageReq
	HeadlineQueryReq        = bird.HeadlineQueryReq
	IDReq                   = bird.IDReq
	IDsReq                  = bird.IDsReq
	IdReq                   = bird.IdReq
	IllustrationsCreateReq  = bird.IllustrationsCreateReq
	IllustrationsListReq    = bird.IllustrationsListReq
	IllustrationsListResp   = bird.IllustrationsListResp
	IllustrationsListVo     = bird.IllustrationsListVo
	IllustrationsListVoData = bird.IllustrationsListVoData
	IllustrationsPageReq    = bird.IllustrationsPageReq
	IllustrationsResp       = bird.IllustrationsResp
	IllustrationsRespVo     = bird.IllustrationsRespVo
	IllustrationsUpdateReq  = bird.IllustrationsUpdateReq
	LabelCreateReq          = bird.LabelCreateReq
	LabelListReq            = bird.LabelListReq
	LabelListResp           = bird.LabelListResp
	LabelListVo             = bird.LabelListVo
	LabelListVoData         = bird.LabelListVoData
	LabelResp               = bird.LabelResp
	LabelUpdateReq          = bird.LabelUpdateReq
	LabelVo                 = bird.LabelVo
	NullReq                 = bird.NullReq
	PageInfoReq             = bird.PageInfoReq
	UUIDReq                 = bird.UUIDReq
	UUIDsReq                = bird.UUIDsReq

	Bird interface {
		InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
		GalleryCreate(ctx context.Context, in *GalleryCreateReq, opts ...grpc.CallOption) (*GalleryResp, error)
		GalleryDelete(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*GalleryResp, error)
		GalleryList(ctx context.Context, in *GalleryListReq, opts ...grpc.CallOption) (*GalleryListResp, error)
		GalleryPage(ctx context.Context, in *GalleryPageReq, opts ...grpc.CallOption) (*GalleryListResp, error)
		GalleryCount(ctx context.Context, in *NullReq, opts ...grpc.CallOption) (*GalleryCount, error)
		IllustrationCreate(ctx context.Context, in *IllustrationsCreateReq, opts ...grpc.CallOption) (*IllustrationsResp, error)
		IllustrationUpdate(ctx context.Context, in *IllustrationsUpdateReq, opts ...grpc.CallOption) (*IllustrationsResp, error)
		IllustrationList(ctx context.Context, in *IllustrationsListReq, opts ...grpc.CallOption) (*IllustrationsListResp, error)
		FindIllustrationByPage(ctx context.Context, in *IllustrationsPageReq, opts ...grpc.CallOption) (*IllustrationsListVo, error)
		PublishIllustration(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IllustrationsResp, error)
		UnpublishIllustration(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IllustrationsResp, error)
		DeleteIllustration(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BooleanResp, error)
		LabelCreate(ctx context.Context, in *LabelCreateReq, opts ...grpc.CallOption) (*LabelResp, error)
		LabelUpdate(ctx context.Context, in *LabelUpdateReq, opts ...grpc.CallOption) (*LabelResp, error)
		LabelList(ctx context.Context, in *LabelListReq, opts ...grpc.CallOption) (*LabelListResp, error)
		FindLabelByPage(ctx context.Context, in *LabelListReq, opts ...grpc.CallOption) (*LabelListVo, error)
		FindLabelById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*LabelVo, error)
		PublishLabel(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*LabelResp, error)
		UnpublishLabel(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*LabelResp, error)
		DeleteLabel(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BooleanResp, error)
		InitClasses(ctx context.Context, in *NullReq, opts ...grpc.CallOption) (*BooleanResp, error)
		ClassesList(ctx context.Context, in *ClassesListReq, opts ...grpc.CallOption) (*ClassesListResp, error)
		QueryHeadlineList(ctx context.Context, in *HeadlineQueryReq, opts ...grpc.CallOption) (*HeadlineListResp, error)
		CreateHeadline(ctx context.Context, in *Headline, opts ...grpc.CallOption) (*Headline, error)
		UpdateHeadline(ctx context.Context, in *Headline, opts ...grpc.CallOption) (*Headline, error)
		DeleteHeadline(ctx context.Context, in *Headline, opts ...grpc.CallOption) (*BaseResp, error)
		QueryAllHeadlines(ctx context.Context, in *HeadlineQueryPageReq, opts ...grpc.CallOption) (*HeadlineListResp, error)
	}

	defaultBird struct {
		cli zrpc.Client
	}
)

func NewBird(cli zrpc.Client) Bird {
	return &defaultBird{
		cli: cli,
	}
}

func (m *defaultBird) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.InitDatabase(ctx, in, opts...)
}

func (m *defaultBird) GalleryCreate(ctx context.Context, in *GalleryCreateReq, opts ...grpc.CallOption) (*GalleryResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.GalleryCreate(ctx, in, opts...)
}

func (m *defaultBird) GalleryDelete(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*GalleryResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.GalleryDelete(ctx, in, opts...)
}

func (m *defaultBird) GalleryList(ctx context.Context, in *GalleryListReq, opts ...grpc.CallOption) (*GalleryListResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.GalleryList(ctx, in, opts...)
}

func (m *defaultBird) GalleryPage(ctx context.Context, in *GalleryPageReq, opts ...grpc.CallOption) (*GalleryListResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.GalleryPage(ctx, in, opts...)
}

func (m *defaultBird) GalleryCount(ctx context.Context, in *NullReq, opts ...grpc.CallOption) (*GalleryCount, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.GalleryCount(ctx, in, opts...)
}

func (m *defaultBird) IllustrationCreate(ctx context.Context, in *IllustrationsCreateReq, opts ...grpc.CallOption) (*IllustrationsResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.IllustrationCreate(ctx, in, opts...)
}

func (m *defaultBird) IllustrationUpdate(ctx context.Context, in *IllustrationsUpdateReq, opts ...grpc.CallOption) (*IllustrationsResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.IllustrationUpdate(ctx, in, opts...)
}

func (m *defaultBird) IllustrationList(ctx context.Context, in *IllustrationsListReq, opts ...grpc.CallOption) (*IllustrationsListResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.IllustrationList(ctx, in, opts...)
}

func (m *defaultBird) FindIllustrationByPage(ctx context.Context, in *IllustrationsPageReq, opts ...grpc.CallOption) (*IllustrationsListVo, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.FindIllustrationByPage(ctx, in, opts...)
}

func (m *defaultBird) PublishIllustration(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IllustrationsResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.PublishIllustration(ctx, in, opts...)
}

func (m *defaultBird) UnpublishIllustration(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IllustrationsResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.UnpublishIllustration(ctx, in, opts...)
}

func (m *defaultBird) DeleteIllustration(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BooleanResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.DeleteIllustration(ctx, in, opts...)
}

func (m *defaultBird) LabelCreate(ctx context.Context, in *LabelCreateReq, opts ...grpc.CallOption) (*LabelResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.LabelCreate(ctx, in, opts...)
}

func (m *defaultBird) LabelUpdate(ctx context.Context, in *LabelUpdateReq, opts ...grpc.CallOption) (*LabelResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.LabelUpdate(ctx, in, opts...)
}

func (m *defaultBird) LabelList(ctx context.Context, in *LabelListReq, opts ...grpc.CallOption) (*LabelListResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.LabelList(ctx, in, opts...)
}

func (m *defaultBird) FindLabelByPage(ctx context.Context, in *LabelListReq, opts ...grpc.CallOption) (*LabelListVo, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.FindLabelByPage(ctx, in, opts...)
}

func (m *defaultBird) FindLabelById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*LabelVo, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.FindLabelById(ctx, in, opts...)
}

func (m *defaultBird) PublishLabel(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*LabelResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.PublishLabel(ctx, in, opts...)
}

func (m *defaultBird) UnpublishLabel(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*LabelResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.UnpublishLabel(ctx, in, opts...)
}

func (m *defaultBird) DeleteLabel(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*BooleanResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.DeleteLabel(ctx, in, opts...)
}

func (m *defaultBird) InitClasses(ctx context.Context, in *NullReq, opts ...grpc.CallOption) (*BooleanResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.InitClasses(ctx, in, opts...)
}

func (m *defaultBird) ClassesList(ctx context.Context, in *ClassesListReq, opts ...grpc.CallOption) (*ClassesListResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.ClassesList(ctx, in, opts...)
}

func (m *defaultBird) QueryHeadlineList(ctx context.Context, in *HeadlineQueryReq, opts ...grpc.CallOption) (*HeadlineListResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.QueryHeadlineList(ctx, in, opts...)
}

func (m *defaultBird) CreateHeadline(ctx context.Context, in *Headline, opts ...grpc.CallOption) (*Headline, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.CreateHeadline(ctx, in, opts...)
}

func (m *defaultBird) UpdateHeadline(ctx context.Context, in *Headline, opts ...grpc.CallOption) (*Headline, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.UpdateHeadline(ctx, in, opts...)
}

func (m *defaultBird) DeleteHeadline(ctx context.Context, in *Headline, opts ...grpc.CallOption) (*BaseResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.DeleteHeadline(ctx, in, opts...)
}

func (m *defaultBird) QueryAllHeadlines(ctx context.Context, in *HeadlineQueryPageReq, opts ...grpc.CallOption) (*HeadlineListResp, error) {
	client := bird.NewBirdClient(m.cli.Conn())
	return client.QueryAllHeadlines(ctx, in, opts...)
}
