// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: bird.proto

package bird

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bird_GalleryCreate_FullMethodName          = "/bird.bird/galleryCreate"
	Bird_GalleryUpdate_FullMethodName          = "/bird.bird/galleryUpdate"
	Bird_GalleryList_FullMethodName            = "/bird.bird/galleryList"
	Bird_IllustrationCreate_FullMethodName     = "/bird.bird/illustrationCreate"
	Bird_IllustrationUpdate_FullMethodName     = "/bird.bird/illustrationUpdate"
	Bird_IllustrationList_FullMethodName       = "/bird.bird/illustrationList"
	Bird_FindIllustrationByPage_FullMethodName = "/bird.bird/findIllustrationByPage"
	Bird_LabelCreate_FullMethodName            = "/bird.bird/labelCreate"
	Bird_LabelUpdate_FullMethodName            = "/bird.bird/labelUpdate"
	Bird_LabelList_FullMethodName              = "/bird.bird/labelList"
	Bird_FindLabelByPage_FullMethodName        = "/bird.bird/findLabelByPage"
	Bird_FindLabelById_FullMethodName          = "/bird.bird/findLabelById"
)

// BirdClient is the client API for Bird service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BirdClient interface {
	// group: gallery
	GalleryCreate(ctx context.Context, in *GalleryCreateReq, opts ...grpc.CallOption) (*GalleryResp, error)
	// group: gallery
	GalleryUpdate(ctx context.Context, in *GalleryUpdateReq, opts ...grpc.CallOption) (*GalleryResp, error)
	// group: gallery
	GalleryList(ctx context.Context, in *GalleryListReq, opts ...grpc.CallOption) (*GalleryListResp, error)
	// group: illustration
	IllustrationCreate(ctx context.Context, in *IllustrationsCreateReq, opts ...grpc.CallOption) (*IllustrationsResp, error)
	// group: illustration
	IllustrationUpdate(ctx context.Context, in *IllustrationsUpdateReq, opts ...grpc.CallOption) (*IllustrationsResp, error)
	// group: illustration
	IllustrationList(ctx context.Context, in *IllustrationsListReq, opts ...grpc.CallOption) (*IllustrationsListResp, error)
	// group: illustration
	FindIllustrationByPage(ctx context.Context, in *IllustrationsListReq, opts ...grpc.CallOption) (*IllustrationsListVo, error)
	// group: label
	LabelCreate(ctx context.Context, in *LabelCreateReq, opts ...grpc.CallOption) (*LabelResp, error)
	// group: label
	LabelUpdate(ctx context.Context, in *LabelUpdateReq, opts ...grpc.CallOption) (*LabelResp, error)
	// group: label
	LabelList(ctx context.Context, in *LabelListReq, opts ...grpc.CallOption) (*LabelListResp, error)
	// group: label
	FindLabelByPage(ctx context.Context, in *LabelListReq, opts ...grpc.CallOption) (*LabelListVo, error)
	// group: label
	FindLabelById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*LabelVo, error)
}

type birdClient struct {
	cc grpc.ClientConnInterface
}

func NewBirdClient(cc grpc.ClientConnInterface) BirdClient {
	return &birdClient{cc}
}

func (c *birdClient) GalleryCreate(ctx context.Context, in *GalleryCreateReq, opts ...grpc.CallOption) (*GalleryResp, error) {
	out := new(GalleryResp)
	err := c.cc.Invoke(ctx, Bird_GalleryCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdClient) GalleryUpdate(ctx context.Context, in *GalleryUpdateReq, opts ...grpc.CallOption) (*GalleryResp, error) {
	out := new(GalleryResp)
	err := c.cc.Invoke(ctx, Bird_GalleryUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdClient) GalleryList(ctx context.Context, in *GalleryListReq, opts ...grpc.CallOption) (*GalleryListResp, error) {
	out := new(GalleryListResp)
	err := c.cc.Invoke(ctx, Bird_GalleryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdClient) IllustrationCreate(ctx context.Context, in *IllustrationsCreateReq, opts ...grpc.CallOption) (*IllustrationsResp, error) {
	out := new(IllustrationsResp)
	err := c.cc.Invoke(ctx, Bird_IllustrationCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdClient) IllustrationUpdate(ctx context.Context, in *IllustrationsUpdateReq, opts ...grpc.CallOption) (*IllustrationsResp, error) {
	out := new(IllustrationsResp)
	err := c.cc.Invoke(ctx, Bird_IllustrationUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdClient) IllustrationList(ctx context.Context, in *IllustrationsListReq, opts ...grpc.CallOption) (*IllustrationsListResp, error) {
	out := new(IllustrationsListResp)
	err := c.cc.Invoke(ctx, Bird_IllustrationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdClient) FindIllustrationByPage(ctx context.Context, in *IllustrationsListReq, opts ...grpc.CallOption) (*IllustrationsListVo, error) {
	out := new(IllustrationsListVo)
	err := c.cc.Invoke(ctx, Bird_FindIllustrationByPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdClient) LabelCreate(ctx context.Context, in *LabelCreateReq, opts ...grpc.CallOption) (*LabelResp, error) {
	out := new(LabelResp)
	err := c.cc.Invoke(ctx, Bird_LabelCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdClient) LabelUpdate(ctx context.Context, in *LabelUpdateReq, opts ...grpc.CallOption) (*LabelResp, error) {
	out := new(LabelResp)
	err := c.cc.Invoke(ctx, Bird_LabelUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdClient) LabelList(ctx context.Context, in *LabelListReq, opts ...grpc.CallOption) (*LabelListResp, error) {
	out := new(LabelListResp)
	err := c.cc.Invoke(ctx, Bird_LabelList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdClient) FindLabelByPage(ctx context.Context, in *LabelListReq, opts ...grpc.CallOption) (*LabelListVo, error) {
	out := new(LabelListVo)
	err := c.cc.Invoke(ctx, Bird_FindLabelByPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdClient) FindLabelById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*LabelVo, error) {
	out := new(LabelVo)
	err := c.cc.Invoke(ctx, Bird_FindLabelById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BirdServer is the server API for Bird service.
// All implementations must embed UnimplementedBirdServer
// for forward compatibility
type BirdServer interface {
	// group: gallery
	GalleryCreate(context.Context, *GalleryCreateReq) (*GalleryResp, error)
	// group: gallery
	GalleryUpdate(context.Context, *GalleryUpdateReq) (*GalleryResp, error)
	// group: gallery
	GalleryList(context.Context, *GalleryListReq) (*GalleryListResp, error)
	// group: illustration
	IllustrationCreate(context.Context, *IllustrationsCreateReq) (*IllustrationsResp, error)
	// group: illustration
	IllustrationUpdate(context.Context, *IllustrationsUpdateReq) (*IllustrationsResp, error)
	// group: illustration
	IllustrationList(context.Context, *IllustrationsListReq) (*IllustrationsListResp, error)
	// group: illustration
	FindIllustrationByPage(context.Context, *IllustrationsListReq) (*IllustrationsListVo, error)
	// group: label
	LabelCreate(context.Context, *LabelCreateReq) (*LabelResp, error)
	// group: label
	LabelUpdate(context.Context, *LabelUpdateReq) (*LabelResp, error)
	// group: label
	LabelList(context.Context, *LabelListReq) (*LabelListResp, error)
	// group: label
	FindLabelByPage(context.Context, *LabelListReq) (*LabelListVo, error)
	// group: label
	FindLabelById(context.Context, *IdReq) (*LabelVo, error)
	mustEmbedUnimplementedBirdServer()
}

// UnimplementedBirdServer must be embedded to have forward compatible implementations.
type UnimplementedBirdServer struct {
}

func (UnimplementedBirdServer) GalleryCreate(context.Context, *GalleryCreateReq) (*GalleryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GalleryCreate not implemented")
}
func (UnimplementedBirdServer) GalleryUpdate(context.Context, *GalleryUpdateReq) (*GalleryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GalleryUpdate not implemented")
}
func (UnimplementedBirdServer) GalleryList(context.Context, *GalleryListReq) (*GalleryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GalleryList not implemented")
}
func (UnimplementedBirdServer) IllustrationCreate(context.Context, *IllustrationsCreateReq) (*IllustrationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IllustrationCreate not implemented")
}
func (UnimplementedBirdServer) IllustrationUpdate(context.Context, *IllustrationsUpdateReq) (*IllustrationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IllustrationUpdate not implemented")
}
func (UnimplementedBirdServer) IllustrationList(context.Context, *IllustrationsListReq) (*IllustrationsListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IllustrationList not implemented")
}
func (UnimplementedBirdServer) FindIllustrationByPage(context.Context, *IllustrationsListReq) (*IllustrationsListVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindIllustrationByPage not implemented")
}
func (UnimplementedBirdServer) LabelCreate(context.Context, *LabelCreateReq) (*LabelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelCreate not implemented")
}
func (UnimplementedBirdServer) LabelUpdate(context.Context, *LabelUpdateReq) (*LabelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelUpdate not implemented")
}
func (UnimplementedBirdServer) LabelList(context.Context, *LabelListReq) (*LabelListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelList not implemented")
}
func (UnimplementedBirdServer) FindLabelByPage(context.Context, *LabelListReq) (*LabelListVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLabelByPage not implemented")
}
func (UnimplementedBirdServer) FindLabelById(context.Context, *IdReq) (*LabelVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLabelById not implemented")
}
func (UnimplementedBirdServer) mustEmbedUnimplementedBirdServer() {}

// UnsafeBirdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BirdServer will
// result in compilation errors.
type UnsafeBirdServer interface {
	mustEmbedUnimplementedBirdServer()
}

func RegisterBirdServer(s grpc.ServiceRegistrar, srv BirdServer) {
	s.RegisterService(&Bird_ServiceDesc, srv)
}

func _Bird_GalleryCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GalleryCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdServer).GalleryCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bird_GalleryCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdServer).GalleryCreate(ctx, req.(*GalleryCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bird_GalleryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GalleryUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdServer).GalleryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bird_GalleryUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdServer).GalleryUpdate(ctx, req.(*GalleryUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bird_GalleryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GalleryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdServer).GalleryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bird_GalleryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdServer).GalleryList(ctx, req.(*GalleryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bird_IllustrationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IllustrationsCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdServer).IllustrationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bird_IllustrationCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdServer).IllustrationCreate(ctx, req.(*IllustrationsCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bird_IllustrationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IllustrationsUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdServer).IllustrationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bird_IllustrationUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdServer).IllustrationUpdate(ctx, req.(*IllustrationsUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bird_IllustrationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IllustrationsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdServer).IllustrationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bird_IllustrationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdServer).IllustrationList(ctx, req.(*IllustrationsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bird_FindIllustrationByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IllustrationsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdServer).FindIllustrationByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bird_FindIllustrationByPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdServer).FindIllustrationByPage(ctx, req.(*IllustrationsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bird_LabelCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdServer).LabelCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bird_LabelCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdServer).LabelCreate(ctx, req.(*LabelCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bird_LabelUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdServer).LabelUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bird_LabelUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdServer).LabelUpdate(ctx, req.(*LabelUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bird_LabelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdServer).LabelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bird_LabelList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdServer).LabelList(ctx, req.(*LabelListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bird_FindLabelByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdServer).FindLabelByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bird_FindLabelByPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdServer).FindLabelByPage(ctx, req.(*LabelListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bird_FindLabelById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdServer).FindLabelById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bird_FindLabelById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdServer).FindLabelById(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Bird_ServiceDesc is the grpc.ServiceDesc for Bird service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bird_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bird.bird",
	HandlerType: (*BirdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "galleryCreate",
			Handler:    _Bird_GalleryCreate_Handler,
		},
		{
			MethodName: "galleryUpdate",
			Handler:    _Bird_GalleryUpdate_Handler,
		},
		{
			MethodName: "galleryList",
			Handler:    _Bird_GalleryList_Handler,
		},
		{
			MethodName: "illustrationCreate",
			Handler:    _Bird_IllustrationCreate_Handler,
		},
		{
			MethodName: "illustrationUpdate",
			Handler:    _Bird_IllustrationUpdate_Handler,
		},
		{
			MethodName: "illustrationList",
			Handler:    _Bird_IllustrationList_Handler,
		},
		{
			MethodName: "findIllustrationByPage",
			Handler:    _Bird_FindIllustrationByPage_Handler,
		},
		{
			MethodName: "labelCreate",
			Handler:    _Bird_LabelCreate_Handler,
		},
		{
			MethodName: "labelUpdate",
			Handler:    _Bird_LabelUpdate_Handler,
		},
		{
			MethodName: "labelList",
			Handler:    _Bird_LabelList_Handler,
		},
		{
			MethodName: "findLabelByPage",
			Handler:    _Bird_FindLabelByPage_Handler,
		},
		{
			MethodName: "findLabelById",
			Handler:    _Bird_FindLabelById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bird.proto",
}
